
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model avaliacoes
 * 
 */
export type avaliacoes = {
  avaliacao_id: number
  usuario_id: number | null
  resultado: avaliacao_enum | null
  comentario: string | null
  data_avaliacao: Date | null
}

/**
 * Model Perguntas
 * 
 */
export type Perguntas = {
  id: number
  pergunta: string
  usuario_id: number
  usuario_nome: string
}

/**
 * Model usuarios
 * 
 */
export type usuarios = {
  usuario_id: number
  nome: string | null
  email: string
  senha: string
  data_criacao: Date | null
}


/**
 * Enums
 */

export const avaliacao_enum: {
  pessimo: 'pessimo',
  ruim: 'ruim',
  normal: 'normal',
  bom: 'bom',
  otimo: 'otimo'
};

export type avaliacao_enum = (typeof avaliacao_enum)[keyof typeof avaliacao_enum]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Avaliacoes
 * const avaliacoes = await prisma.avaliacoes.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Avaliacoes
   * const avaliacoes = await prisma.avaliacoes.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.avaliacoes`: Exposes CRUD operations for the **avaliacoes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Avaliacoes
    * const avaliacoes = await prisma.avaliacoes.findMany()
    * ```
    */
  get avaliacoes(): Prisma.avaliacoesDelegate<GlobalReject>;

  /**
   * `prisma.perguntas`: Exposes CRUD operations for the **Perguntas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Perguntas
    * const perguntas = await prisma.perguntas.findMany()
    * ```
    */
  get perguntas(): Prisma.PerguntasDelegate<GlobalReject>;

  /**
   * `prisma.usuarios`: Exposes CRUD operations for the **usuarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuarios.findMany()
    * ```
    */
  get usuarios(): Prisma.usuariosDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    avaliacoes: 'avaliacoes',
    Perguntas: 'Perguntas',
    usuarios: 'usuarios'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuariosCountOutputType
   */


  export type UsuariosCountOutputType = {
    avaliacoes: number
  }

  export type UsuariosCountOutputTypeSelect = {
    avaliacoes?: boolean
  }

  export type UsuariosCountOutputTypeGetPayload<S extends boolean | null | undefined | UsuariosCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UsuariosCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UsuariosCountOutputTypeArgs)
    ? UsuariosCountOutputType 
    : S extends { select: any } & (UsuariosCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UsuariosCountOutputType ? UsuariosCountOutputType[P] : never
  } 
      : UsuariosCountOutputType




  // Custom InputTypes

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsuariosCountOutputType
     */
    select?: UsuariosCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model avaliacoes
   */


  export type AggregateAvaliacoes = {
    _count: AvaliacoesCountAggregateOutputType | null
    _avg: AvaliacoesAvgAggregateOutputType | null
    _sum: AvaliacoesSumAggregateOutputType | null
    _min: AvaliacoesMinAggregateOutputType | null
    _max: AvaliacoesMaxAggregateOutputType | null
  }

  export type AvaliacoesAvgAggregateOutputType = {
    avaliacao_id: number | null
    usuario_id: number | null
  }

  export type AvaliacoesSumAggregateOutputType = {
    avaliacao_id: number | null
    usuario_id: number | null
  }

  export type AvaliacoesMinAggregateOutputType = {
    avaliacao_id: number | null
    usuario_id: number | null
    resultado: avaliacao_enum | null
    comentario: string | null
    data_avaliacao: Date | null
  }

  export type AvaliacoesMaxAggregateOutputType = {
    avaliacao_id: number | null
    usuario_id: number | null
    resultado: avaliacao_enum | null
    comentario: string | null
    data_avaliacao: Date | null
  }

  export type AvaliacoesCountAggregateOutputType = {
    avaliacao_id: number
    usuario_id: number
    resultado: number
    comentario: number
    data_avaliacao: number
    _all: number
  }


  export type AvaliacoesAvgAggregateInputType = {
    avaliacao_id?: true
    usuario_id?: true
  }

  export type AvaliacoesSumAggregateInputType = {
    avaliacao_id?: true
    usuario_id?: true
  }

  export type AvaliacoesMinAggregateInputType = {
    avaliacao_id?: true
    usuario_id?: true
    resultado?: true
    comentario?: true
    data_avaliacao?: true
  }

  export type AvaliacoesMaxAggregateInputType = {
    avaliacao_id?: true
    usuario_id?: true
    resultado?: true
    comentario?: true
    data_avaliacao?: true
  }

  export type AvaliacoesCountAggregateInputType = {
    avaliacao_id?: true
    usuario_id?: true
    resultado?: true
    comentario?: true
    data_avaliacao?: true
    _all?: true
  }

  export type AvaliacoesAggregateArgs = {
    /**
     * Filter which avaliacoes to aggregate.
     */
    where?: avaliacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of avaliacoes to fetch.
     */
    orderBy?: Enumerable<avaliacoesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: avaliacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` avaliacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` avaliacoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned avaliacoes
    **/
    _count?: true | AvaliacoesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AvaliacoesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AvaliacoesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AvaliacoesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AvaliacoesMaxAggregateInputType
  }

  export type GetAvaliacoesAggregateType<T extends AvaliacoesAggregateArgs> = {
        [P in keyof T & keyof AggregateAvaliacoes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAvaliacoes[P]>
      : GetScalarType<T[P], AggregateAvaliacoes[P]>
  }




  export type AvaliacoesGroupByArgs = {
    where?: avaliacoesWhereInput
    orderBy?: Enumerable<avaliacoesOrderByWithAggregationInput>
    by: AvaliacoesScalarFieldEnum[]
    having?: avaliacoesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AvaliacoesCountAggregateInputType | true
    _avg?: AvaliacoesAvgAggregateInputType
    _sum?: AvaliacoesSumAggregateInputType
    _min?: AvaliacoesMinAggregateInputType
    _max?: AvaliacoesMaxAggregateInputType
  }


  export type AvaliacoesGroupByOutputType = {
    avaliacao_id: number
    usuario_id: number | null
    resultado: avaliacao_enum | null
    comentario: string | null
    data_avaliacao: Date | null
    _count: AvaliacoesCountAggregateOutputType | null
    _avg: AvaliacoesAvgAggregateOutputType | null
    _sum: AvaliacoesSumAggregateOutputType | null
    _min: AvaliacoesMinAggregateOutputType | null
    _max: AvaliacoesMaxAggregateOutputType | null
  }

  type GetAvaliacoesGroupByPayload<T extends AvaliacoesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AvaliacoesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AvaliacoesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AvaliacoesGroupByOutputType[P]>
            : GetScalarType<T[P], AvaliacoesGroupByOutputType[P]>
        }
      >
    >


  export type avaliacoesSelect = {
    avaliacao_id?: boolean
    usuario_id?: boolean
    resultado?: boolean
    comentario?: boolean
    data_avaliacao?: boolean
    usuarios?: boolean | usuariosArgs
  }


  export type avaliacoesInclude = {
    usuarios?: boolean | usuariosArgs
  }

  export type avaliacoesGetPayload<S extends boolean | null | undefined | avaliacoesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? avaliacoes :
    S extends undefined ? never :
    S extends { include: any } & (avaliacoesArgs | avaliacoesFindManyArgs)
    ? avaliacoes  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'usuarios' ? usuariosGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (avaliacoesArgs | avaliacoesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'usuarios' ? usuariosGetPayload<S['select'][P]> | null :  P extends keyof avaliacoes ? avaliacoes[P] : never
  } 
      : avaliacoes


  type avaliacoesCountArgs = 
    Omit<avaliacoesFindManyArgs, 'select' | 'include'> & {
      select?: AvaliacoesCountAggregateInputType | true
    }

  export interface avaliacoesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Avaliacoes that matches the filter.
     * @param {avaliacoesFindUniqueArgs} args - Arguments to find a Avaliacoes
     * @example
     * // Get one Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends avaliacoesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, avaliacoesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'avaliacoes'> extends True ? Prisma__avaliacoesClient<avaliacoesGetPayload<T>> : Prisma__avaliacoesClient<avaliacoesGetPayload<T> | null, null>

    /**
     * Find one Avaliacoes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {avaliacoesFindUniqueOrThrowArgs} args - Arguments to find a Avaliacoes
     * @example
     * // Get one Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends avaliacoesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, avaliacoesFindUniqueOrThrowArgs>
    ): Prisma__avaliacoesClient<avaliacoesGetPayload<T>>

    /**
     * Find the first Avaliacoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avaliacoesFindFirstArgs} args - Arguments to find a Avaliacoes
     * @example
     * // Get one Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends avaliacoesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, avaliacoesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'avaliacoes'> extends True ? Prisma__avaliacoesClient<avaliacoesGetPayload<T>> : Prisma__avaliacoesClient<avaliacoesGetPayload<T> | null, null>

    /**
     * Find the first Avaliacoes that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avaliacoesFindFirstOrThrowArgs} args - Arguments to find a Avaliacoes
     * @example
     * // Get one Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends avaliacoesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, avaliacoesFindFirstOrThrowArgs>
    ): Prisma__avaliacoesClient<avaliacoesGetPayload<T>>

    /**
     * Find zero or more Avaliacoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avaliacoesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.findMany()
     * 
     * // Get first 10 Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.findMany({ take: 10 })
     * 
     * // Only select the `avaliacao_id`
     * const avaliacoesWithAvaliacao_idOnly = await prisma.avaliacoes.findMany({ select: { avaliacao_id: true } })
     * 
    **/
    findMany<T extends avaliacoesFindManyArgs>(
      args?: SelectSubset<T, avaliacoesFindManyArgs>
    ): Prisma.PrismaPromise<Array<avaliacoesGetPayload<T>>>

    /**
     * Create a Avaliacoes.
     * @param {avaliacoesCreateArgs} args - Arguments to create a Avaliacoes.
     * @example
     * // Create one Avaliacoes
     * const Avaliacoes = await prisma.avaliacoes.create({
     *   data: {
     *     // ... data to create a Avaliacoes
     *   }
     * })
     * 
    **/
    create<T extends avaliacoesCreateArgs>(
      args: SelectSubset<T, avaliacoesCreateArgs>
    ): Prisma__avaliacoesClient<avaliacoesGetPayload<T>>

    /**
     * Create many Avaliacoes.
     *     @param {avaliacoesCreateManyArgs} args - Arguments to create many Avaliacoes.
     *     @example
     *     // Create many Avaliacoes
     *     const avaliacoes = await prisma.avaliacoes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends avaliacoesCreateManyArgs>(
      args?: SelectSubset<T, avaliacoesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Avaliacoes.
     * @param {avaliacoesDeleteArgs} args - Arguments to delete one Avaliacoes.
     * @example
     * // Delete one Avaliacoes
     * const Avaliacoes = await prisma.avaliacoes.delete({
     *   where: {
     *     // ... filter to delete one Avaliacoes
     *   }
     * })
     * 
    **/
    delete<T extends avaliacoesDeleteArgs>(
      args: SelectSubset<T, avaliacoesDeleteArgs>
    ): Prisma__avaliacoesClient<avaliacoesGetPayload<T>>

    /**
     * Update one Avaliacoes.
     * @param {avaliacoesUpdateArgs} args - Arguments to update one Avaliacoes.
     * @example
     * // Update one Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends avaliacoesUpdateArgs>(
      args: SelectSubset<T, avaliacoesUpdateArgs>
    ): Prisma__avaliacoesClient<avaliacoesGetPayload<T>>

    /**
     * Delete zero or more Avaliacoes.
     * @param {avaliacoesDeleteManyArgs} args - Arguments to filter Avaliacoes to delete.
     * @example
     * // Delete a few Avaliacoes
     * const { count } = await prisma.avaliacoes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends avaliacoesDeleteManyArgs>(
      args?: SelectSubset<T, avaliacoesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Avaliacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avaliacoesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends avaliacoesUpdateManyArgs>(
      args: SelectSubset<T, avaliacoesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Avaliacoes.
     * @param {avaliacoesUpsertArgs} args - Arguments to update or create a Avaliacoes.
     * @example
     * // Update or create a Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.upsert({
     *   create: {
     *     // ... data to create a Avaliacoes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Avaliacoes we want to update
     *   }
     * })
    **/
    upsert<T extends avaliacoesUpsertArgs>(
      args: SelectSubset<T, avaliacoesUpsertArgs>
    ): Prisma__avaliacoesClient<avaliacoesGetPayload<T>>

    /**
     * Count the number of Avaliacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avaliacoesCountArgs} args - Arguments to filter Avaliacoes to count.
     * @example
     * // Count the number of Avaliacoes
     * const count = await prisma.avaliacoes.count({
     *   where: {
     *     // ... the filter for the Avaliacoes we want to count
     *   }
     * })
    **/
    count<T extends avaliacoesCountArgs>(
      args?: Subset<T, avaliacoesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AvaliacoesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Avaliacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvaliacoesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AvaliacoesAggregateArgs>(args: Subset<T, AvaliacoesAggregateArgs>): Prisma.PrismaPromise<GetAvaliacoesAggregateType<T>>

    /**
     * Group by Avaliacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvaliacoesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AvaliacoesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AvaliacoesGroupByArgs['orderBy'] }
        : { orderBy?: AvaliacoesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AvaliacoesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAvaliacoesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for avaliacoes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__avaliacoesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    usuarios<T extends usuariosArgs= {}>(args?: Subset<T, usuariosArgs>): Prisma__usuariosClient<usuariosGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * avaliacoes base type for findUnique actions
   */
  export type avaliacoesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: avaliacoesInclude | null
    /**
     * Filter, which avaliacoes to fetch.
     */
    where: avaliacoesWhereUniqueInput
  }

  /**
   * avaliacoes findUnique
   */
  export interface avaliacoesFindUniqueArgs extends avaliacoesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * avaliacoes findUniqueOrThrow
   */
  export type avaliacoesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: avaliacoesInclude | null
    /**
     * Filter, which avaliacoes to fetch.
     */
    where: avaliacoesWhereUniqueInput
  }


  /**
   * avaliacoes base type for findFirst actions
   */
  export type avaliacoesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: avaliacoesInclude | null
    /**
     * Filter, which avaliacoes to fetch.
     */
    where?: avaliacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of avaliacoes to fetch.
     */
    orderBy?: Enumerable<avaliacoesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for avaliacoes.
     */
    cursor?: avaliacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` avaliacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` avaliacoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of avaliacoes.
     */
    distinct?: Enumerable<AvaliacoesScalarFieldEnum>
  }

  /**
   * avaliacoes findFirst
   */
  export interface avaliacoesFindFirstArgs extends avaliacoesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * avaliacoes findFirstOrThrow
   */
  export type avaliacoesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: avaliacoesInclude | null
    /**
     * Filter, which avaliacoes to fetch.
     */
    where?: avaliacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of avaliacoes to fetch.
     */
    orderBy?: Enumerable<avaliacoesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for avaliacoes.
     */
    cursor?: avaliacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` avaliacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` avaliacoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of avaliacoes.
     */
    distinct?: Enumerable<AvaliacoesScalarFieldEnum>
  }


  /**
   * avaliacoes findMany
   */
  export type avaliacoesFindManyArgs = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: avaliacoesInclude | null
    /**
     * Filter, which avaliacoes to fetch.
     */
    where?: avaliacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of avaliacoes to fetch.
     */
    orderBy?: Enumerable<avaliacoesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing avaliacoes.
     */
    cursor?: avaliacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` avaliacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` avaliacoes.
     */
    skip?: number
    distinct?: Enumerable<AvaliacoesScalarFieldEnum>
  }


  /**
   * avaliacoes create
   */
  export type avaliacoesCreateArgs = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: avaliacoesInclude | null
    /**
     * The data needed to create a avaliacoes.
     */
    data: XOR<avaliacoesCreateInput, avaliacoesUncheckedCreateInput>
  }


  /**
   * avaliacoes createMany
   */
  export type avaliacoesCreateManyArgs = {
    /**
     * The data used to create many avaliacoes.
     */
    data: Enumerable<avaliacoesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * avaliacoes update
   */
  export type avaliacoesUpdateArgs = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: avaliacoesInclude | null
    /**
     * The data needed to update a avaliacoes.
     */
    data: XOR<avaliacoesUpdateInput, avaliacoesUncheckedUpdateInput>
    /**
     * Choose, which avaliacoes to update.
     */
    where: avaliacoesWhereUniqueInput
  }


  /**
   * avaliacoes updateMany
   */
  export type avaliacoesUpdateManyArgs = {
    /**
     * The data used to update avaliacoes.
     */
    data: XOR<avaliacoesUpdateManyMutationInput, avaliacoesUncheckedUpdateManyInput>
    /**
     * Filter which avaliacoes to update
     */
    where?: avaliacoesWhereInput
  }


  /**
   * avaliacoes upsert
   */
  export type avaliacoesUpsertArgs = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: avaliacoesInclude | null
    /**
     * The filter to search for the avaliacoes to update in case it exists.
     */
    where: avaliacoesWhereUniqueInput
    /**
     * In case the avaliacoes found by the `where` argument doesn't exist, create a new avaliacoes with this data.
     */
    create: XOR<avaliacoesCreateInput, avaliacoesUncheckedCreateInput>
    /**
     * In case the avaliacoes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<avaliacoesUpdateInput, avaliacoesUncheckedUpdateInput>
  }


  /**
   * avaliacoes delete
   */
  export type avaliacoesDeleteArgs = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: avaliacoesInclude | null
    /**
     * Filter which avaliacoes to delete.
     */
    where: avaliacoesWhereUniqueInput
  }


  /**
   * avaliacoes deleteMany
   */
  export type avaliacoesDeleteManyArgs = {
    /**
     * Filter which avaliacoes to delete
     */
    where?: avaliacoesWhereInput
  }


  /**
   * avaliacoes without action
   */
  export type avaliacoesArgs = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: avaliacoesInclude | null
  }



  /**
   * Model Perguntas
   */


  export type AggregatePerguntas = {
    _count: PerguntasCountAggregateOutputType | null
    _avg: PerguntasAvgAggregateOutputType | null
    _sum: PerguntasSumAggregateOutputType | null
    _min: PerguntasMinAggregateOutputType | null
    _max: PerguntasMaxAggregateOutputType | null
  }

  export type PerguntasAvgAggregateOutputType = {
    id: number | null
    usuario_id: number | null
  }

  export type PerguntasSumAggregateOutputType = {
    id: number | null
    usuario_id: number | null
  }

  export type PerguntasMinAggregateOutputType = {
    id: number | null
    pergunta: string | null
    usuario_id: number | null
    usuario_nome: string | null
  }

  export type PerguntasMaxAggregateOutputType = {
    id: number | null
    pergunta: string | null
    usuario_id: number | null
    usuario_nome: string | null
  }

  export type PerguntasCountAggregateOutputType = {
    id: number
    pergunta: number
    usuario_id: number
    usuario_nome: number
    _all: number
  }


  export type PerguntasAvgAggregateInputType = {
    id?: true
    usuario_id?: true
  }

  export type PerguntasSumAggregateInputType = {
    id?: true
    usuario_id?: true
  }

  export type PerguntasMinAggregateInputType = {
    id?: true
    pergunta?: true
    usuario_id?: true
    usuario_nome?: true
  }

  export type PerguntasMaxAggregateInputType = {
    id?: true
    pergunta?: true
    usuario_id?: true
    usuario_nome?: true
  }

  export type PerguntasCountAggregateInputType = {
    id?: true
    pergunta?: true
    usuario_id?: true
    usuario_nome?: true
    _all?: true
  }

  export type PerguntasAggregateArgs = {
    /**
     * Filter which Perguntas to aggregate.
     */
    where?: PerguntasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Perguntas to fetch.
     */
    orderBy?: Enumerable<PerguntasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PerguntasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Perguntas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Perguntas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Perguntas
    **/
    _count?: true | PerguntasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PerguntasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PerguntasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PerguntasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PerguntasMaxAggregateInputType
  }

  export type GetPerguntasAggregateType<T extends PerguntasAggregateArgs> = {
        [P in keyof T & keyof AggregatePerguntas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerguntas[P]>
      : GetScalarType<T[P], AggregatePerguntas[P]>
  }




  export type PerguntasGroupByArgs = {
    where?: PerguntasWhereInput
    orderBy?: Enumerable<PerguntasOrderByWithAggregationInput>
    by: PerguntasScalarFieldEnum[]
    having?: PerguntasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PerguntasCountAggregateInputType | true
    _avg?: PerguntasAvgAggregateInputType
    _sum?: PerguntasSumAggregateInputType
    _min?: PerguntasMinAggregateInputType
    _max?: PerguntasMaxAggregateInputType
  }


  export type PerguntasGroupByOutputType = {
    id: number
    pergunta: string
    usuario_id: number
    usuario_nome: string
    _count: PerguntasCountAggregateOutputType | null
    _avg: PerguntasAvgAggregateOutputType | null
    _sum: PerguntasSumAggregateOutputType | null
    _min: PerguntasMinAggregateOutputType | null
    _max: PerguntasMaxAggregateOutputType | null
  }

  type GetPerguntasGroupByPayload<T extends PerguntasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PerguntasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PerguntasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PerguntasGroupByOutputType[P]>
            : GetScalarType<T[P], PerguntasGroupByOutputType[P]>
        }
      >
    >


  export type PerguntasSelect = {
    id?: boolean
    pergunta?: boolean
    usuario_id?: boolean
    usuario_nome?: boolean
  }


  export type PerguntasGetPayload<S extends boolean | null | undefined | PerguntasArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Perguntas :
    S extends undefined ? never :
    S extends { include: any } & (PerguntasArgs | PerguntasFindManyArgs)
    ? Perguntas 
    : S extends { select: any } & (PerguntasArgs | PerguntasFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Perguntas ? Perguntas[P] : never
  } 
      : Perguntas


  type PerguntasCountArgs = 
    Omit<PerguntasFindManyArgs, 'select' | 'include'> & {
      select?: PerguntasCountAggregateInputType | true
    }

  export interface PerguntasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Perguntas that matches the filter.
     * @param {PerguntasFindUniqueArgs} args - Arguments to find a Perguntas
     * @example
     * // Get one Perguntas
     * const perguntas = await prisma.perguntas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PerguntasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PerguntasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Perguntas'> extends True ? Prisma__PerguntasClient<PerguntasGetPayload<T>> : Prisma__PerguntasClient<PerguntasGetPayload<T> | null, null>

    /**
     * Find one Perguntas that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PerguntasFindUniqueOrThrowArgs} args - Arguments to find a Perguntas
     * @example
     * // Get one Perguntas
     * const perguntas = await prisma.perguntas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PerguntasFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PerguntasFindUniqueOrThrowArgs>
    ): Prisma__PerguntasClient<PerguntasGetPayload<T>>

    /**
     * Find the first Perguntas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerguntasFindFirstArgs} args - Arguments to find a Perguntas
     * @example
     * // Get one Perguntas
     * const perguntas = await prisma.perguntas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PerguntasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PerguntasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Perguntas'> extends True ? Prisma__PerguntasClient<PerguntasGetPayload<T>> : Prisma__PerguntasClient<PerguntasGetPayload<T> | null, null>

    /**
     * Find the first Perguntas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerguntasFindFirstOrThrowArgs} args - Arguments to find a Perguntas
     * @example
     * // Get one Perguntas
     * const perguntas = await prisma.perguntas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PerguntasFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PerguntasFindFirstOrThrowArgs>
    ): Prisma__PerguntasClient<PerguntasGetPayload<T>>

    /**
     * Find zero or more Perguntas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerguntasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Perguntas
     * const perguntas = await prisma.perguntas.findMany()
     * 
     * // Get first 10 Perguntas
     * const perguntas = await prisma.perguntas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const perguntasWithIdOnly = await prisma.perguntas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PerguntasFindManyArgs>(
      args?: SelectSubset<T, PerguntasFindManyArgs>
    ): Prisma.PrismaPromise<Array<PerguntasGetPayload<T>>>

    /**
     * Create a Perguntas.
     * @param {PerguntasCreateArgs} args - Arguments to create a Perguntas.
     * @example
     * // Create one Perguntas
     * const Perguntas = await prisma.perguntas.create({
     *   data: {
     *     // ... data to create a Perguntas
     *   }
     * })
     * 
    **/
    create<T extends PerguntasCreateArgs>(
      args: SelectSubset<T, PerguntasCreateArgs>
    ): Prisma__PerguntasClient<PerguntasGetPayload<T>>

    /**
     * Create many Perguntas.
     *     @param {PerguntasCreateManyArgs} args - Arguments to create many Perguntas.
     *     @example
     *     // Create many Perguntas
     *     const perguntas = await prisma.perguntas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PerguntasCreateManyArgs>(
      args?: SelectSubset<T, PerguntasCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Perguntas.
     * @param {PerguntasDeleteArgs} args - Arguments to delete one Perguntas.
     * @example
     * // Delete one Perguntas
     * const Perguntas = await prisma.perguntas.delete({
     *   where: {
     *     // ... filter to delete one Perguntas
     *   }
     * })
     * 
    **/
    delete<T extends PerguntasDeleteArgs>(
      args: SelectSubset<T, PerguntasDeleteArgs>
    ): Prisma__PerguntasClient<PerguntasGetPayload<T>>

    /**
     * Update one Perguntas.
     * @param {PerguntasUpdateArgs} args - Arguments to update one Perguntas.
     * @example
     * // Update one Perguntas
     * const perguntas = await prisma.perguntas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PerguntasUpdateArgs>(
      args: SelectSubset<T, PerguntasUpdateArgs>
    ): Prisma__PerguntasClient<PerguntasGetPayload<T>>

    /**
     * Delete zero or more Perguntas.
     * @param {PerguntasDeleteManyArgs} args - Arguments to filter Perguntas to delete.
     * @example
     * // Delete a few Perguntas
     * const { count } = await prisma.perguntas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PerguntasDeleteManyArgs>(
      args?: SelectSubset<T, PerguntasDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Perguntas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerguntasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Perguntas
     * const perguntas = await prisma.perguntas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PerguntasUpdateManyArgs>(
      args: SelectSubset<T, PerguntasUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Perguntas.
     * @param {PerguntasUpsertArgs} args - Arguments to update or create a Perguntas.
     * @example
     * // Update or create a Perguntas
     * const perguntas = await prisma.perguntas.upsert({
     *   create: {
     *     // ... data to create a Perguntas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Perguntas we want to update
     *   }
     * })
    **/
    upsert<T extends PerguntasUpsertArgs>(
      args: SelectSubset<T, PerguntasUpsertArgs>
    ): Prisma__PerguntasClient<PerguntasGetPayload<T>>

    /**
     * Count the number of Perguntas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerguntasCountArgs} args - Arguments to filter Perguntas to count.
     * @example
     * // Count the number of Perguntas
     * const count = await prisma.perguntas.count({
     *   where: {
     *     // ... the filter for the Perguntas we want to count
     *   }
     * })
    **/
    count<T extends PerguntasCountArgs>(
      args?: Subset<T, PerguntasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PerguntasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Perguntas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerguntasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PerguntasAggregateArgs>(args: Subset<T, PerguntasAggregateArgs>): Prisma.PrismaPromise<GetPerguntasAggregateType<T>>

    /**
     * Group by Perguntas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerguntasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PerguntasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PerguntasGroupByArgs['orderBy'] }
        : { orderBy?: PerguntasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PerguntasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPerguntasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Perguntas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PerguntasClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Perguntas base type for findUnique actions
   */
  export type PerguntasFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * Filter, which Perguntas to fetch.
     */
    where: PerguntasWhereUniqueInput
  }

  /**
   * Perguntas findUnique
   */
  export interface PerguntasFindUniqueArgs extends PerguntasFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Perguntas findUniqueOrThrow
   */
  export type PerguntasFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * Filter, which Perguntas to fetch.
     */
    where: PerguntasWhereUniqueInput
  }


  /**
   * Perguntas base type for findFirst actions
   */
  export type PerguntasFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * Filter, which Perguntas to fetch.
     */
    where?: PerguntasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Perguntas to fetch.
     */
    orderBy?: Enumerable<PerguntasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Perguntas.
     */
    cursor?: PerguntasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Perguntas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Perguntas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Perguntas.
     */
    distinct?: Enumerable<PerguntasScalarFieldEnum>
  }

  /**
   * Perguntas findFirst
   */
  export interface PerguntasFindFirstArgs extends PerguntasFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Perguntas findFirstOrThrow
   */
  export type PerguntasFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * Filter, which Perguntas to fetch.
     */
    where?: PerguntasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Perguntas to fetch.
     */
    orderBy?: Enumerable<PerguntasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Perguntas.
     */
    cursor?: PerguntasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Perguntas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Perguntas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Perguntas.
     */
    distinct?: Enumerable<PerguntasScalarFieldEnum>
  }


  /**
   * Perguntas findMany
   */
  export type PerguntasFindManyArgs = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * Filter, which Perguntas to fetch.
     */
    where?: PerguntasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Perguntas to fetch.
     */
    orderBy?: Enumerable<PerguntasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Perguntas.
     */
    cursor?: PerguntasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Perguntas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Perguntas.
     */
    skip?: number
    distinct?: Enumerable<PerguntasScalarFieldEnum>
  }


  /**
   * Perguntas create
   */
  export type PerguntasCreateArgs = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * The data needed to create a Perguntas.
     */
    data: XOR<PerguntasCreateInput, PerguntasUncheckedCreateInput>
  }


  /**
   * Perguntas createMany
   */
  export type PerguntasCreateManyArgs = {
    /**
     * The data used to create many Perguntas.
     */
    data: Enumerable<PerguntasCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Perguntas update
   */
  export type PerguntasUpdateArgs = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * The data needed to update a Perguntas.
     */
    data: XOR<PerguntasUpdateInput, PerguntasUncheckedUpdateInput>
    /**
     * Choose, which Perguntas to update.
     */
    where: PerguntasWhereUniqueInput
  }


  /**
   * Perguntas updateMany
   */
  export type PerguntasUpdateManyArgs = {
    /**
     * The data used to update Perguntas.
     */
    data: XOR<PerguntasUpdateManyMutationInput, PerguntasUncheckedUpdateManyInput>
    /**
     * Filter which Perguntas to update
     */
    where?: PerguntasWhereInput
  }


  /**
   * Perguntas upsert
   */
  export type PerguntasUpsertArgs = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * The filter to search for the Perguntas to update in case it exists.
     */
    where: PerguntasWhereUniqueInput
    /**
     * In case the Perguntas found by the `where` argument doesn't exist, create a new Perguntas with this data.
     */
    create: XOR<PerguntasCreateInput, PerguntasUncheckedCreateInput>
    /**
     * In case the Perguntas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PerguntasUpdateInput, PerguntasUncheckedUpdateInput>
  }


  /**
   * Perguntas delete
   */
  export type PerguntasDeleteArgs = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
    /**
     * Filter which Perguntas to delete.
     */
    where: PerguntasWhereUniqueInput
  }


  /**
   * Perguntas deleteMany
   */
  export type PerguntasDeleteManyArgs = {
    /**
     * Filter which Perguntas to delete
     */
    where?: PerguntasWhereInput
  }


  /**
   * Perguntas without action
   */
  export type PerguntasArgs = {
    /**
     * Select specific fields to fetch from the Perguntas
     */
    select?: PerguntasSelect | null
  }



  /**
   * Model usuarios
   */


  export type AggregateUsuarios = {
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  export type UsuariosAvgAggregateOutputType = {
    usuario_id: number | null
  }

  export type UsuariosSumAggregateOutputType = {
    usuario_id: number | null
  }

  export type UsuariosMinAggregateOutputType = {
    usuario_id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    data_criacao: Date | null
  }

  export type UsuariosMaxAggregateOutputType = {
    usuario_id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    data_criacao: Date | null
  }

  export type UsuariosCountAggregateOutputType = {
    usuario_id: number
    nome: number
    email: number
    senha: number
    data_criacao: number
    _all: number
  }


  export type UsuariosAvgAggregateInputType = {
    usuario_id?: true
  }

  export type UsuariosSumAggregateInputType = {
    usuario_id?: true
  }

  export type UsuariosMinAggregateInputType = {
    usuario_id?: true
    nome?: true
    email?: true
    senha?: true
    data_criacao?: true
  }

  export type UsuariosMaxAggregateInputType = {
    usuario_id?: true
    nome?: true
    email?: true
    senha?: true
    data_criacao?: true
  }

  export type UsuariosCountAggregateInputType = {
    usuario_id?: true
    nome?: true
    email?: true
    senha?: true
    data_criacao?: true
    _all?: true
  }

  export type UsuariosAggregateArgs = {
    /**
     * Filter which usuarios to aggregate.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: Enumerable<usuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuariosMaxAggregateInputType
  }

  export type GetUsuariosAggregateType<T extends UsuariosAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarios[P]>
      : GetScalarType<T[P], AggregateUsuarios[P]>
  }




  export type UsuariosGroupByArgs = {
    where?: usuariosWhereInput
    orderBy?: Enumerable<usuariosOrderByWithAggregationInput>
    by: UsuariosScalarFieldEnum[]
    having?: usuariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuariosCountAggregateInputType | true
    _avg?: UsuariosAvgAggregateInputType
    _sum?: UsuariosSumAggregateInputType
    _min?: UsuariosMinAggregateInputType
    _max?: UsuariosMaxAggregateInputType
  }


  export type UsuariosGroupByOutputType = {
    usuario_id: number
    nome: string | null
    email: string
    senha: string
    data_criacao: Date | null
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  type GetUsuariosGroupByPayload<T extends UsuariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UsuariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
            : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
        }
      >
    >


  export type usuariosSelect = {
    usuario_id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    data_criacao?: boolean
    avaliacoes?: boolean | usuarios$avaliacoesArgs
    _count?: boolean | UsuariosCountOutputTypeArgs
  }


  export type usuariosInclude = {
    avaliacoes?: boolean | usuarios$avaliacoesArgs
    _count?: boolean | UsuariosCountOutputTypeArgs
  }

  export type usuariosGetPayload<S extends boolean | null | undefined | usuariosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? usuarios :
    S extends undefined ? never :
    S extends { include: any } & (usuariosArgs | usuariosFindManyArgs)
    ? usuarios  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'avaliacoes' ? Array < avaliacoesGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsuariosCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (usuariosArgs | usuariosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'avaliacoes' ? Array < avaliacoesGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsuariosCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof usuarios ? usuarios[P] : never
  } 
      : usuarios


  type usuariosCountArgs = 
    Omit<usuariosFindManyArgs, 'select' | 'include'> & {
      select?: UsuariosCountAggregateInputType | true
    }

  export interface usuariosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Usuarios that matches the filter.
     * @param {usuariosFindUniqueArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usuariosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usuariosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'usuarios'> extends True ? Prisma__usuariosClient<usuariosGetPayload<T>> : Prisma__usuariosClient<usuariosGetPayload<T> | null, null>

    /**
     * Find one Usuarios that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usuariosFindUniqueOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usuariosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, usuariosFindUniqueOrThrowArgs>
    ): Prisma__usuariosClient<usuariosGetPayload<T>>

    /**
     * Find the first Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usuariosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usuariosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'usuarios'> extends True ? Prisma__usuariosClient<usuariosGetPayload<T>> : Prisma__usuariosClient<usuariosGetPayload<T> | null, null>

    /**
     * Find the first Usuarios that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usuariosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, usuariosFindFirstOrThrowArgs>
    ): Prisma__usuariosClient<usuariosGetPayload<T>>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuarios.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuarios.findMany({ take: 10 })
     * 
     * // Only select the `usuario_id`
     * const usuariosWithUsuario_idOnly = await prisma.usuarios.findMany({ select: { usuario_id: true } })
     * 
    **/
    findMany<T extends usuariosFindManyArgs>(
      args?: SelectSubset<T, usuariosFindManyArgs>
    ): Prisma.PrismaPromise<Array<usuariosGetPayload<T>>>

    /**
     * Create a Usuarios.
     * @param {usuariosCreateArgs} args - Arguments to create a Usuarios.
     * @example
     * // Create one Usuarios
     * const Usuarios = await prisma.usuarios.create({
     *   data: {
     *     // ... data to create a Usuarios
     *   }
     * })
     * 
    **/
    create<T extends usuariosCreateArgs>(
      args: SelectSubset<T, usuariosCreateArgs>
    ): Prisma__usuariosClient<usuariosGetPayload<T>>

    /**
     * Create many Usuarios.
     *     @param {usuariosCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuarios = await prisma.usuarios.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usuariosCreateManyArgs>(
      args?: SelectSubset<T, usuariosCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuarios.
     * @param {usuariosDeleteArgs} args - Arguments to delete one Usuarios.
     * @example
     * // Delete one Usuarios
     * const Usuarios = await prisma.usuarios.delete({
     *   where: {
     *     // ... filter to delete one Usuarios
     *   }
     * })
     * 
    **/
    delete<T extends usuariosDeleteArgs>(
      args: SelectSubset<T, usuariosDeleteArgs>
    ): Prisma__usuariosClient<usuariosGetPayload<T>>

    /**
     * Update one Usuarios.
     * @param {usuariosUpdateArgs} args - Arguments to update one Usuarios.
     * @example
     * // Update one Usuarios
     * const usuarios = await prisma.usuarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usuariosUpdateArgs>(
      args: SelectSubset<T, usuariosUpdateArgs>
    ): Prisma__usuariosClient<usuariosGetPayload<T>>

    /**
     * Delete zero or more Usuarios.
     * @param {usuariosDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usuariosDeleteManyArgs>(
      args?: SelectSubset<T, usuariosDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usuariosUpdateManyArgs>(
      args: SelectSubset<T, usuariosUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuarios.
     * @param {usuariosUpsertArgs} args - Arguments to update or create a Usuarios.
     * @example
     * // Update or create a Usuarios
     * const usuarios = await prisma.usuarios.upsert({
     *   create: {
     *     // ... data to create a Usuarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuarios we want to update
     *   }
     * })
    **/
    upsert<T extends usuariosUpsertArgs>(
      args: SelectSubset<T, usuariosUpsertArgs>
    ): Prisma__usuariosClient<usuariosGetPayload<T>>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuarios.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuariosCountArgs>(
      args?: Subset<T, usuariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuariosAggregateArgs>(args: Subset<T, UsuariosAggregateArgs>): Prisma.PrismaPromise<GetUsuariosAggregateType<T>>

    /**
     * Group by Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuariosGroupByArgs['orderBy'] }
        : { orderBy?: UsuariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for usuarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usuariosClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    avaliacoes<T extends usuarios$avaliacoesArgs= {}>(args?: Subset<T, usuarios$avaliacoesArgs>): Prisma.PrismaPromise<Array<avaliacoesGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * usuarios base type for findUnique actions
   */
  export type usuariosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuariosInclude | null
    /**
     * Filter, which usuarios to fetch.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios findUnique
   */
  export interface usuariosFindUniqueArgs extends usuariosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * usuarios findUniqueOrThrow
   */
  export type usuariosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuariosInclude | null
    /**
     * Filter, which usuarios to fetch.
     */
    where: usuariosWhereUniqueInput
  }


  /**
   * usuarios base type for findFirst actions
   */
  export type usuariosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuariosInclude | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: Enumerable<usuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: Enumerable<UsuariosScalarFieldEnum>
  }

  /**
   * usuarios findFirst
   */
  export interface usuariosFindFirstArgs extends usuariosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * usuarios findFirstOrThrow
   */
  export type usuariosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuariosInclude | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: Enumerable<usuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: Enumerable<UsuariosScalarFieldEnum>
  }


  /**
   * usuarios findMany
   */
  export type usuariosFindManyArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuariosInclude | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: Enumerable<usuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    distinct?: Enumerable<UsuariosScalarFieldEnum>
  }


  /**
   * usuarios create
   */
  export type usuariosCreateArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuariosInclude | null
    /**
     * The data needed to create a usuarios.
     */
    data: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
  }


  /**
   * usuarios createMany
   */
  export type usuariosCreateManyArgs = {
    /**
     * The data used to create many usuarios.
     */
    data: Enumerable<usuariosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * usuarios update
   */
  export type usuariosUpdateArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuariosInclude | null
    /**
     * The data needed to update a usuarios.
     */
    data: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
    /**
     * Choose, which usuarios to update.
     */
    where: usuariosWhereUniqueInput
  }


  /**
   * usuarios updateMany
   */
  export type usuariosUpdateManyArgs = {
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuariosUpdateManyMutationInput, usuariosUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuariosWhereInput
  }


  /**
   * usuarios upsert
   */
  export type usuariosUpsertArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuariosInclude | null
    /**
     * The filter to search for the usuarios to update in case it exists.
     */
    where: usuariosWhereUniqueInput
    /**
     * In case the usuarios found by the `where` argument doesn't exist, create a new usuarios with this data.
     */
    create: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
    /**
     * In case the usuarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
  }


  /**
   * usuarios delete
   */
  export type usuariosDeleteArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuariosInclude | null
    /**
     * Filter which usuarios to delete.
     */
    where: usuariosWhereUniqueInput
  }


  /**
   * usuarios deleteMany
   */
  export type usuariosDeleteManyArgs = {
    /**
     * Filter which usuarios to delete
     */
    where?: usuariosWhereInput
  }


  /**
   * usuarios.avaliacoes
   */
  export type usuarios$avaliacoesArgs = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: avaliacoesInclude | null
    where?: avaliacoesWhereInput
    orderBy?: Enumerable<avaliacoesOrderByWithRelationInput>
    cursor?: avaliacoesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AvaliacoesScalarFieldEnum>
  }


  /**
   * usuarios without action
   */
  export type usuariosArgs = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuariosInclude | null
  }



  /**
   * Enums
   */

  export const AvaliacoesScalarFieldEnum: {
    avaliacao_id: 'avaliacao_id',
    usuario_id: 'usuario_id',
    resultado: 'resultado',
    comentario: 'comentario',
    data_avaliacao: 'data_avaliacao'
  };

  export type AvaliacoesScalarFieldEnum = (typeof AvaliacoesScalarFieldEnum)[keyof typeof AvaliacoesScalarFieldEnum]


  export const PerguntasScalarFieldEnum: {
    id: 'id',
    pergunta: 'pergunta',
    usuario_id: 'usuario_id',
    usuario_nome: 'usuario_nome'
  };

  export type PerguntasScalarFieldEnum = (typeof PerguntasScalarFieldEnum)[keyof typeof PerguntasScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuariosScalarFieldEnum: {
    usuario_id: 'usuario_id',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    data_criacao: 'data_criacao'
  };

  export type UsuariosScalarFieldEnum = (typeof UsuariosScalarFieldEnum)[keyof typeof UsuariosScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type avaliacoesWhereInput = {
    AND?: Enumerable<avaliacoesWhereInput>
    OR?: Enumerable<avaliacoesWhereInput>
    NOT?: Enumerable<avaliacoesWhereInput>
    avaliacao_id?: IntFilter | number
    usuario_id?: IntNullableFilter | number | null
    resultado?: Enumavaliacao_enumNullableFilter | avaliacao_enum | null
    comentario?: StringNullableFilter | string | null
    data_avaliacao?: DateTimeNullableFilter | Date | string | null
    usuarios?: XOR<UsuariosRelationFilter, usuariosWhereInput> | null
  }

  export type avaliacoesOrderByWithRelationInput = {
    avaliacao_id?: SortOrder
    usuario_id?: SortOrder
    resultado?: SortOrder
    comentario?: SortOrder
    data_avaliacao?: SortOrder
    usuarios?: usuariosOrderByWithRelationInput
  }

  export type avaliacoesWhereUniqueInput = {
    avaliacao_id?: number
  }

  export type avaliacoesOrderByWithAggregationInput = {
    avaliacao_id?: SortOrder
    usuario_id?: SortOrder
    resultado?: SortOrder
    comentario?: SortOrder
    data_avaliacao?: SortOrder
    _count?: avaliacoesCountOrderByAggregateInput
    _avg?: avaliacoesAvgOrderByAggregateInput
    _max?: avaliacoesMaxOrderByAggregateInput
    _min?: avaliacoesMinOrderByAggregateInput
    _sum?: avaliacoesSumOrderByAggregateInput
  }

  export type avaliacoesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<avaliacoesScalarWhereWithAggregatesInput>
    OR?: Enumerable<avaliacoesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<avaliacoesScalarWhereWithAggregatesInput>
    avaliacao_id?: IntWithAggregatesFilter | number
    usuario_id?: IntNullableWithAggregatesFilter | number | null
    resultado?: Enumavaliacao_enumNullableWithAggregatesFilter | avaliacao_enum | null
    comentario?: StringNullableWithAggregatesFilter | string | null
    data_avaliacao?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type PerguntasWhereInput = {
    AND?: Enumerable<PerguntasWhereInput>
    OR?: Enumerable<PerguntasWhereInput>
    NOT?: Enumerable<PerguntasWhereInput>
    id?: IntFilter | number
    pergunta?: StringFilter | string
    usuario_id?: IntFilter | number
    usuario_nome?: StringFilter | string
  }

  export type PerguntasOrderByWithRelationInput = {
    id?: SortOrder
    pergunta?: SortOrder
    usuario_id?: SortOrder
    usuario_nome?: SortOrder
  }

  export type PerguntasWhereUniqueInput = {
    id?: number
  }

  export type PerguntasOrderByWithAggregationInput = {
    id?: SortOrder
    pergunta?: SortOrder
    usuario_id?: SortOrder
    usuario_nome?: SortOrder
    _count?: PerguntasCountOrderByAggregateInput
    _avg?: PerguntasAvgOrderByAggregateInput
    _max?: PerguntasMaxOrderByAggregateInput
    _min?: PerguntasMinOrderByAggregateInput
    _sum?: PerguntasSumOrderByAggregateInput
  }

  export type PerguntasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PerguntasScalarWhereWithAggregatesInput>
    OR?: Enumerable<PerguntasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PerguntasScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    pergunta?: StringWithAggregatesFilter | string
    usuario_id?: IntWithAggregatesFilter | number
    usuario_nome?: StringWithAggregatesFilter | string
  }

  export type usuariosWhereInput = {
    AND?: Enumerable<usuariosWhereInput>
    OR?: Enumerable<usuariosWhereInput>
    NOT?: Enumerable<usuariosWhereInput>
    usuario_id?: IntFilter | number
    nome?: StringNullableFilter | string | null
    email?: StringFilter | string
    senha?: StringFilter | string
    data_criacao?: DateTimeNullableFilter | Date | string | null
    avaliacoes?: AvaliacoesListRelationFilter
  }

  export type usuariosOrderByWithRelationInput = {
    usuario_id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    data_criacao?: SortOrder
    avaliacoes?: avaliacoesOrderByRelationAggregateInput
  }

  export type usuariosWhereUniqueInput = {
    usuario_id?: number
    email?: string
  }

  export type usuariosOrderByWithAggregationInput = {
    usuario_id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    data_criacao?: SortOrder
    _count?: usuariosCountOrderByAggregateInput
    _avg?: usuariosAvgOrderByAggregateInput
    _max?: usuariosMaxOrderByAggregateInput
    _min?: usuariosMinOrderByAggregateInput
    _sum?: usuariosSumOrderByAggregateInput
  }

  export type usuariosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usuariosScalarWhereWithAggregatesInput>
    OR?: Enumerable<usuariosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usuariosScalarWhereWithAggregatesInput>
    usuario_id?: IntWithAggregatesFilter | number
    nome?: StringNullableWithAggregatesFilter | string | null
    email?: StringWithAggregatesFilter | string
    senha?: StringWithAggregatesFilter | string
    data_criacao?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type avaliacoesCreateInput = {
    resultado?: avaliacao_enum | null
    comentario?: string | null
    data_avaliacao?: Date | string | null
    usuarios?: usuariosCreateNestedOneWithoutAvaliacoesInput
  }

  export type avaliacoesUncheckedCreateInput = {
    avaliacao_id?: number
    usuario_id?: number | null
    resultado?: avaliacao_enum | null
    comentario?: string | null
    data_avaliacao?: Date | string | null
  }

  export type avaliacoesUpdateInput = {
    resultado?: NullableEnumavaliacao_enumFieldUpdateOperationsInput | avaliacao_enum | null
    comentario?: NullableStringFieldUpdateOperationsInput | string | null
    data_avaliacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usuarios?: usuariosUpdateOneWithoutAvaliacoesNestedInput
  }

  export type avaliacoesUncheckedUpdateInput = {
    avaliacao_id?: IntFieldUpdateOperationsInput | number
    usuario_id?: NullableIntFieldUpdateOperationsInput | number | null
    resultado?: NullableEnumavaliacao_enumFieldUpdateOperationsInput | avaliacao_enum | null
    comentario?: NullableStringFieldUpdateOperationsInput | string | null
    data_avaliacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type avaliacoesCreateManyInput = {
    avaliacao_id?: number
    usuario_id?: number | null
    resultado?: avaliacao_enum | null
    comentario?: string | null
    data_avaliacao?: Date | string | null
  }

  export type avaliacoesUpdateManyMutationInput = {
    resultado?: NullableEnumavaliacao_enumFieldUpdateOperationsInput | avaliacao_enum | null
    comentario?: NullableStringFieldUpdateOperationsInput | string | null
    data_avaliacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type avaliacoesUncheckedUpdateManyInput = {
    avaliacao_id?: IntFieldUpdateOperationsInput | number
    usuario_id?: NullableIntFieldUpdateOperationsInput | number | null
    resultado?: NullableEnumavaliacao_enumFieldUpdateOperationsInput | avaliacao_enum | null
    comentario?: NullableStringFieldUpdateOperationsInput | string | null
    data_avaliacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PerguntasCreateInput = {
    pergunta: string
    usuario_id: number
    usuario_nome: string
  }

  export type PerguntasUncheckedCreateInput = {
    id?: number
    pergunta: string
    usuario_id: number
    usuario_nome: string
  }

  export type PerguntasUpdateInput = {
    pergunta?: StringFieldUpdateOperationsInput | string
    usuario_id?: IntFieldUpdateOperationsInput | number
    usuario_nome?: StringFieldUpdateOperationsInput | string
  }

  export type PerguntasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pergunta?: StringFieldUpdateOperationsInput | string
    usuario_id?: IntFieldUpdateOperationsInput | number
    usuario_nome?: StringFieldUpdateOperationsInput | string
  }

  export type PerguntasCreateManyInput = {
    id?: number
    pergunta: string
    usuario_id: number
    usuario_nome: string
  }

  export type PerguntasUpdateManyMutationInput = {
    pergunta?: StringFieldUpdateOperationsInput | string
    usuario_id?: IntFieldUpdateOperationsInput | number
    usuario_nome?: StringFieldUpdateOperationsInput | string
  }

  export type PerguntasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pergunta?: StringFieldUpdateOperationsInput | string
    usuario_id?: IntFieldUpdateOperationsInput | number
    usuario_nome?: StringFieldUpdateOperationsInput | string
  }

  export type usuariosCreateInput = {
    nome?: string | null
    email: string
    senha: string
    data_criacao?: Date | string | null
    avaliacoes?: avaliacoesCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosUncheckedCreateInput = {
    usuario_id?: number
    nome?: string | null
    email: string
    senha: string
    data_criacao?: Date | string | null
    avaliacoes?: avaliacoesUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosUpdateInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data_criacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avaliacoes?: avaliacoesUpdateManyWithoutUsuariosNestedInput
  }

  export type usuariosUncheckedUpdateInput = {
    usuario_id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data_criacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avaliacoes?: avaliacoesUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type usuariosCreateManyInput = {
    usuario_id?: number
    nome?: string | null
    email: string
    senha: string
    data_criacao?: Date | string | null
  }

  export type usuariosUpdateManyMutationInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data_criacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usuariosUncheckedUpdateManyInput = {
    usuario_id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data_criacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type Enumavaliacao_enumNullableFilter = {
    equals?: avaliacao_enum | null
    in?: Enumerable<avaliacao_enum> | null
    notIn?: Enumerable<avaliacao_enum> | null
    not?: NestedEnumavaliacao_enumNullableFilter | avaliacao_enum | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type UsuariosRelationFilter = {
    is?: usuariosWhereInput | null
    isNot?: usuariosWhereInput | null
  }

  export type avaliacoesCountOrderByAggregateInput = {
    avaliacao_id?: SortOrder
    usuario_id?: SortOrder
    resultado?: SortOrder
    comentario?: SortOrder
    data_avaliacao?: SortOrder
  }

  export type avaliacoesAvgOrderByAggregateInput = {
    avaliacao_id?: SortOrder
    usuario_id?: SortOrder
  }

  export type avaliacoesMaxOrderByAggregateInput = {
    avaliacao_id?: SortOrder
    usuario_id?: SortOrder
    resultado?: SortOrder
    comentario?: SortOrder
    data_avaliacao?: SortOrder
  }

  export type avaliacoesMinOrderByAggregateInput = {
    avaliacao_id?: SortOrder
    usuario_id?: SortOrder
    resultado?: SortOrder
    comentario?: SortOrder
    data_avaliacao?: SortOrder
  }

  export type avaliacoesSumOrderByAggregateInput = {
    avaliacao_id?: SortOrder
    usuario_id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type Enumavaliacao_enumNullableWithAggregatesFilter = {
    equals?: avaliacao_enum | null
    in?: Enumerable<avaliacao_enum> | null
    notIn?: Enumerable<avaliacao_enum> | null
    not?: NestedEnumavaliacao_enumNullableWithAggregatesFilter | avaliacao_enum | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumavaliacao_enumNullableFilter
    _max?: NestedEnumavaliacao_enumNullableFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type PerguntasCountOrderByAggregateInput = {
    id?: SortOrder
    pergunta?: SortOrder
    usuario_id?: SortOrder
    usuario_nome?: SortOrder
  }

  export type PerguntasAvgOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
  }

  export type PerguntasMaxOrderByAggregateInput = {
    id?: SortOrder
    pergunta?: SortOrder
    usuario_id?: SortOrder
    usuario_nome?: SortOrder
  }

  export type PerguntasMinOrderByAggregateInput = {
    id?: SortOrder
    pergunta?: SortOrder
    usuario_id?: SortOrder
    usuario_nome?: SortOrder
  }

  export type PerguntasSumOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type AvaliacoesListRelationFilter = {
    every?: avaliacoesWhereInput
    some?: avaliacoesWhereInput
    none?: avaliacoesWhereInput
  }

  export type avaliacoesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usuariosCountOrderByAggregateInput = {
    usuario_id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    data_criacao?: SortOrder
  }

  export type usuariosAvgOrderByAggregateInput = {
    usuario_id?: SortOrder
  }

  export type usuariosMaxOrderByAggregateInput = {
    usuario_id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    data_criacao?: SortOrder
  }

  export type usuariosMinOrderByAggregateInput = {
    usuario_id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    data_criacao?: SortOrder
  }

  export type usuariosSumOrderByAggregateInput = {
    usuario_id?: SortOrder
  }

  export type usuariosCreateNestedOneWithoutAvaliacoesInput = {
    create?: XOR<usuariosCreateWithoutAvaliacoesInput, usuariosUncheckedCreateWithoutAvaliacoesInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutAvaliacoesInput
    connect?: usuariosWhereUniqueInput
  }

  export type NullableEnumavaliacao_enumFieldUpdateOperationsInput = {
    set?: avaliacao_enum | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type usuariosUpdateOneWithoutAvaliacoesNestedInput = {
    create?: XOR<usuariosCreateWithoutAvaliacoesInput, usuariosUncheckedCreateWithoutAvaliacoesInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutAvaliacoesInput
    upsert?: usuariosUpsertWithoutAvaliacoesInput
    disconnect?: boolean
    delete?: boolean
    connect?: usuariosWhereUniqueInput
    update?: XOR<usuariosUpdateWithoutAvaliacoesInput, usuariosUncheckedUpdateWithoutAvaliacoesInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type avaliacoesCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<Enumerable<avaliacoesCreateWithoutUsuariosInput>, Enumerable<avaliacoesUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<avaliacoesCreateOrConnectWithoutUsuariosInput>
    createMany?: avaliacoesCreateManyUsuariosInputEnvelope
    connect?: Enumerable<avaliacoesWhereUniqueInput>
  }

  export type avaliacoesUncheckedCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<Enumerable<avaliacoesCreateWithoutUsuariosInput>, Enumerable<avaliacoesUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<avaliacoesCreateOrConnectWithoutUsuariosInput>
    createMany?: avaliacoesCreateManyUsuariosInputEnvelope
    connect?: Enumerable<avaliacoesWhereUniqueInput>
  }

  export type avaliacoesUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<Enumerable<avaliacoesCreateWithoutUsuariosInput>, Enumerable<avaliacoesUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<avaliacoesCreateOrConnectWithoutUsuariosInput>
    upsert?: Enumerable<avaliacoesUpsertWithWhereUniqueWithoutUsuariosInput>
    createMany?: avaliacoesCreateManyUsuariosInputEnvelope
    set?: Enumerable<avaliacoesWhereUniqueInput>
    disconnect?: Enumerable<avaliacoesWhereUniqueInput>
    delete?: Enumerable<avaliacoesWhereUniqueInput>
    connect?: Enumerable<avaliacoesWhereUniqueInput>
    update?: Enumerable<avaliacoesUpdateWithWhereUniqueWithoutUsuariosInput>
    updateMany?: Enumerable<avaliacoesUpdateManyWithWhereWithoutUsuariosInput>
    deleteMany?: Enumerable<avaliacoesScalarWhereInput>
  }

  export type avaliacoesUncheckedUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<Enumerable<avaliacoesCreateWithoutUsuariosInput>, Enumerable<avaliacoesUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<avaliacoesCreateOrConnectWithoutUsuariosInput>
    upsert?: Enumerable<avaliacoesUpsertWithWhereUniqueWithoutUsuariosInput>
    createMany?: avaliacoesCreateManyUsuariosInputEnvelope
    set?: Enumerable<avaliacoesWhereUniqueInput>
    disconnect?: Enumerable<avaliacoesWhereUniqueInput>
    delete?: Enumerable<avaliacoesWhereUniqueInput>
    connect?: Enumerable<avaliacoesWhereUniqueInput>
    update?: Enumerable<avaliacoesUpdateWithWhereUniqueWithoutUsuariosInput>
    updateMany?: Enumerable<avaliacoesUpdateManyWithWhereWithoutUsuariosInput>
    deleteMany?: Enumerable<avaliacoesScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumavaliacao_enumNullableFilter = {
    equals?: avaliacao_enum | null
    in?: Enumerable<avaliacao_enum> | null
    notIn?: Enumerable<avaliacao_enum> | null
    not?: NestedEnumavaliacao_enumNullableFilter | avaliacao_enum | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedEnumavaliacao_enumNullableWithAggregatesFilter = {
    equals?: avaliacao_enum | null
    in?: Enumerable<avaliacao_enum> | null
    notIn?: Enumerable<avaliacao_enum> | null
    not?: NestedEnumavaliacao_enumNullableWithAggregatesFilter | avaliacao_enum | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumavaliacao_enumNullableFilter
    _max?: NestedEnumavaliacao_enumNullableFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type usuariosCreateWithoutAvaliacoesInput = {
    nome?: string | null
    email: string
    senha: string
    data_criacao?: Date | string | null
  }

  export type usuariosUncheckedCreateWithoutAvaliacoesInput = {
    usuario_id?: number
    nome?: string | null
    email: string
    senha: string
    data_criacao?: Date | string | null
  }

  export type usuariosCreateOrConnectWithoutAvaliacoesInput = {
    where: usuariosWhereUniqueInput
    create: XOR<usuariosCreateWithoutAvaliacoesInput, usuariosUncheckedCreateWithoutAvaliacoesInput>
  }

  export type usuariosUpsertWithoutAvaliacoesInput = {
    update: XOR<usuariosUpdateWithoutAvaliacoesInput, usuariosUncheckedUpdateWithoutAvaliacoesInput>
    create: XOR<usuariosCreateWithoutAvaliacoesInput, usuariosUncheckedCreateWithoutAvaliacoesInput>
  }

  export type usuariosUpdateWithoutAvaliacoesInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data_criacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usuariosUncheckedUpdateWithoutAvaliacoesInput = {
    usuario_id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data_criacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type avaliacoesCreateWithoutUsuariosInput = {
    resultado?: avaliacao_enum | null
    comentario?: string | null
    data_avaliacao?: Date | string | null
  }

  export type avaliacoesUncheckedCreateWithoutUsuariosInput = {
    avaliacao_id?: number
    resultado?: avaliacao_enum | null
    comentario?: string | null
    data_avaliacao?: Date | string | null
  }

  export type avaliacoesCreateOrConnectWithoutUsuariosInput = {
    where: avaliacoesWhereUniqueInput
    create: XOR<avaliacoesCreateWithoutUsuariosInput, avaliacoesUncheckedCreateWithoutUsuariosInput>
  }

  export type avaliacoesCreateManyUsuariosInputEnvelope = {
    data: Enumerable<avaliacoesCreateManyUsuariosInput>
    skipDuplicates?: boolean
  }

  export type avaliacoesUpsertWithWhereUniqueWithoutUsuariosInput = {
    where: avaliacoesWhereUniqueInput
    update: XOR<avaliacoesUpdateWithoutUsuariosInput, avaliacoesUncheckedUpdateWithoutUsuariosInput>
    create: XOR<avaliacoesCreateWithoutUsuariosInput, avaliacoesUncheckedCreateWithoutUsuariosInput>
  }

  export type avaliacoesUpdateWithWhereUniqueWithoutUsuariosInput = {
    where: avaliacoesWhereUniqueInput
    data: XOR<avaliacoesUpdateWithoutUsuariosInput, avaliacoesUncheckedUpdateWithoutUsuariosInput>
  }

  export type avaliacoesUpdateManyWithWhereWithoutUsuariosInput = {
    where: avaliacoesScalarWhereInput
    data: XOR<avaliacoesUpdateManyMutationInput, avaliacoesUncheckedUpdateManyWithoutAvaliacoesInput>
  }

  export type avaliacoesScalarWhereInput = {
    AND?: Enumerable<avaliacoesScalarWhereInput>
    OR?: Enumerable<avaliacoesScalarWhereInput>
    NOT?: Enumerable<avaliacoesScalarWhereInput>
    avaliacao_id?: IntFilter | number
    usuario_id?: IntNullableFilter | number | null
    resultado?: Enumavaliacao_enumNullableFilter | avaliacao_enum | null
    comentario?: StringNullableFilter | string | null
    data_avaliacao?: DateTimeNullableFilter | Date | string | null
  }

  export type avaliacoesCreateManyUsuariosInput = {
    avaliacao_id?: number
    resultado?: avaliacao_enum | null
    comentario?: string | null
    data_avaliacao?: Date | string | null
  }

  export type avaliacoesUpdateWithoutUsuariosInput = {
    resultado?: NullableEnumavaliacao_enumFieldUpdateOperationsInput | avaliacao_enum | null
    comentario?: NullableStringFieldUpdateOperationsInput | string | null
    data_avaliacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type avaliacoesUncheckedUpdateWithoutUsuariosInput = {
    avaliacao_id?: IntFieldUpdateOperationsInput | number
    resultado?: NullableEnumavaliacao_enumFieldUpdateOperationsInput | avaliacao_enum | null
    comentario?: NullableStringFieldUpdateOperationsInput | string | null
    data_avaliacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type avaliacoesUncheckedUpdateManyWithoutAvaliacoesInput = {
    avaliacao_id?: IntFieldUpdateOperationsInput | number
    resultado?: NullableEnumavaliacao_enumFieldUpdateOperationsInput | avaliacao_enum | null
    comentario?: NullableStringFieldUpdateOperationsInput | string | null
    data_avaliacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}